# source: https://eu1.prisma.sh/muhammad-muneeb-akhlaq/backend/dev
# timestamp: Sun Sep 08 2019 20:41:37 GMT+0500 (Pakistan Standard Time)

type AggregateBarcode {
  count: Int!
}

type AggregateCategory {
  count: Int!
}

type AggregateExpense {
  count: Int!
}

type AggregateLineItem {
  count: Int!
}

type AggregateNotification {
  count: Int!
}

type AggregatePaidDetail {
  count: Int!
}

type AggregateProduct {
  count: Int!
}

type AggregateSalesItem {
  count: Int!
}

type AggregateSalesTicket {
  count: Int!
}

type AggregateStockItem {
  count: Int!
}

type AggregateSupplier {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type Barcode implements Node {
  id: ID!
  code: String!
  name: String!
}

"""A connection to a list of items."""
type BarcodeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BarcodeEdge]!
  aggregate: AggregateBarcode!
}

input BarcodeCreateInput {
  id: ID
  code: String!
  name: String!
}

"""An edge in a connection."""
type BarcodeEdge {
  """The item at the end of the edge."""
  node: Barcode!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BarcodeOrderByInput {
  id_ASC
  id_DESC
  code_ASC
  code_DESC
  name_ASC
  name_DESC
}

type BarcodePreviousValues {
  id: ID!
  code: String!
  name: String!
}

type BarcodeSubscriptionPayload {
  mutation: MutationType!
  node: Barcode
  updatedFields: [String!]
  previousValues: BarcodePreviousValues
}

input BarcodeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BarcodeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BarcodeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BarcodeSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BarcodeWhereInput
}

input BarcodeUpdateInput {
  code: String
  name: String
}

input BarcodeUpdateManyMutationInput {
  code: String
  name: String
}

input BarcodeWhereInput {
  """Logical AND on all given filters."""
  AND: [BarcodeWhereInput!]

  """Logical OR on all given filters."""
  OR: [BarcodeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BarcodeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  code: String

  """All values that are not equal to given value."""
  code_not: String

  """All values that are contained in given list."""
  code_in: [String!]

  """All values that are not contained in given list."""
  code_not_in: [String!]

  """All values less than the given value."""
  code_lt: String

  """All values less than or equal the given value."""
  code_lte: String

  """All values greater than the given value."""
  code_gt: String

  """All values greater than or equal the given value."""
  code_gte: String

  """All values containing the given string."""
  code_contains: String

  """All values not containing the given string."""
  code_not_contains: String

  """All values starting with the given string."""
  code_starts_with: String

  """All values not starting with the given string."""
  code_not_starts_with: String

  """All values ending with the given string."""
  code_ends_with: String

  """All values not ending with the given string."""
  code_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

input BarcodeWhereUniqueInput {
  id: ID
  code: String
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Category implements Node {
  id: ID!
  name: String!
  lineitem: LineItem!
}

"""A connection to a list of items."""
type CategoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CategoryEdge]!
  aggregate: AggregateCategory!
}

input CategoryCreateInput {
  id: ID
  name: String!
  lineitem: LineItemCreateOneInput!
}

input CategoryCreateOneInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
}

"""An edge in a connection."""
type CategoryEdge {
  """The item at the end of the edge."""
  node: Category!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CategoryOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type CategoryPreviousValues {
  id: ID!
  name: String!
}

type CategorySubscriptionPayload {
  mutation: MutationType!
  node: Category
  updatedFields: [String!]
  previousValues: CategoryPreviousValues
}

input CategorySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CategorySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CategorySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CategorySubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CategoryWhereInput
}

input CategoryUpdateDataInput {
  name: String
  lineitem: LineItemUpdateOneRequiredInput
}

input CategoryUpdateInput {
  name: String
  lineitem: LineItemUpdateOneRequiredInput
}

input CategoryUpdateManyMutationInput {
  name: String
}

input CategoryUpdateOneRequiredInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
  update: CategoryUpdateDataInput
  upsert: CategoryUpsertNestedInput
}

input CategoryUpsertNestedInput {
  update: CategoryUpdateDataInput!
  create: CategoryCreateInput!
}

input CategoryWhereInput {
  """Logical AND on all given filters."""
  AND: [CategoryWhereInput!]

  """Logical OR on all given filters."""
  OR: [CategoryWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CategoryWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  lineitem: LineItemWhereInput
}

input CategoryWhereUniqueInput {
  id: ID
}

scalar DateTime

type Expense implements Node {
  id: ID!
  createdAt: DateTime!
  description: String!
  amount: Float!
}

"""A connection to a list of items."""
type ExpenseConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ExpenseEdge]!
  aggregate: AggregateExpense!
}

input ExpenseCreateInput {
  id: ID
  description: String!
  amount: Float!
}

"""An edge in a connection."""
type ExpenseEdge {
  """The item at the end of the edge."""
  node: Expense!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ExpenseOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  amount_ASC
  amount_DESC
}

type ExpensePreviousValues {
  id: ID!
  createdAt: DateTime!
  description: String!
  amount: Float!
}

type ExpenseSubscriptionPayload {
  mutation: MutationType!
  node: Expense
  updatedFields: [String!]
  previousValues: ExpensePreviousValues
}

input ExpenseSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ExpenseSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ExpenseSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ExpenseSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ExpenseWhereInput
}

input ExpenseUpdateInput {
  description: String
  amount: Float
}

input ExpenseUpdateManyMutationInput {
  description: String
  amount: Float
}

input ExpenseWhereInput {
  """Logical AND on all given filters."""
  AND: [ExpenseWhereInput!]

  """Logical OR on all given filters."""
  OR: [ExpenseWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ExpenseWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  amount: Float

  """All values that are not equal to given value."""
  amount_not: Float

  """All values that are contained in given list."""
  amount_in: [Float!]

  """All values that are not contained in given list."""
  amount_not_in: [Float!]

  """All values less than the given value."""
  amount_lt: Float

  """All values less than or equal the given value."""
  amount_lte: Float

  """All values greater than the given value."""
  amount_gt: Float

  """All values greater than or equal the given value."""
  amount_gte: Float
}

input ExpenseWhereUniqueInput {
  id: ID
}

type LineItem implements Node {
  id: ID!
  name: String!
}

"""A connection to a list of items."""
type LineItemConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LineItemEdge]!
  aggregate: AggregateLineItem!
}

input LineItemCreateInput {
  id: ID
  name: String!
}

input LineItemCreateOneInput {
  create: LineItemCreateInput
  connect: LineItemWhereUniqueInput
}

"""An edge in a connection."""
type LineItemEdge {
  """The item at the end of the edge."""
  node: LineItem!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LineItemOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type LineItemPreviousValues {
  id: ID!
  name: String!
}

type LineItemSubscriptionPayload {
  mutation: MutationType!
  node: LineItem
  updatedFields: [String!]
  previousValues: LineItemPreviousValues
}

input LineItemSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LineItemSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LineItemSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LineItemSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LineItemWhereInput
}

input LineItemUpdateDataInput {
  name: String
}

input LineItemUpdateInput {
  name: String
}

input LineItemUpdateManyMutationInput {
  name: String
}

input LineItemUpdateOneRequiredInput {
  create: LineItemCreateInput
  connect: LineItemWhereUniqueInput
  update: LineItemUpdateDataInput
  upsert: LineItemUpsertNestedInput
}

input LineItemUpsertNestedInput {
  update: LineItemUpdateDataInput!
  create: LineItemCreateInput!
}

input LineItemWhereInput {
  """Logical AND on all given filters."""
  AND: [LineItemWhereInput!]

  """Logical OR on all given filters."""
  OR: [LineItemWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LineItemWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

input LineItemWhereUniqueInput {
  id: ID
  name: String
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createPaidDetail(data: PaidDetailCreateInput!): PaidDetail!
  createStockItem(data: StockItemCreateInput!): StockItem!
  createSalesItem(data: SalesItemCreateInput!): SalesItem!
  createSalesTicket(data: SalesTicketCreateInput!): SalesTicket!
  createExpense(data: ExpenseCreateInput!): Expense!
  createNotification(data: NotificationCreateInput!): Notification!
  createBarcode(data: BarcodeCreateInput!): Barcode!
  createCategory(data: CategoryCreateInput!): Category!
  createProduct(data: ProductCreateInput!): Product!
  createLineItem(data: LineItemCreateInput!): LineItem!
  createSupplier(data: SupplierCreateInput!): Supplier!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updatePaidDetail(data: PaidDetailUpdateInput!, where: PaidDetailWhereUniqueInput!): PaidDetail
  updateStockItem(data: StockItemUpdateInput!, where: StockItemWhereUniqueInput!): StockItem
  updateSalesItem(data: SalesItemUpdateInput!, where: SalesItemWhereUniqueInput!): SalesItem
  updateSalesTicket(data: SalesTicketUpdateInput!, where: SalesTicketWhereUniqueInput!): SalesTicket
  updateExpense(data: ExpenseUpdateInput!, where: ExpenseWhereUniqueInput!): Expense
  updateNotification(data: NotificationUpdateInput!, where: NotificationWhereUniqueInput!): Notification
  updateBarcode(data: BarcodeUpdateInput!, where: BarcodeWhereUniqueInput!): Barcode
  updateCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  updateLineItem(data: LineItemUpdateInput!, where: LineItemWhereUniqueInput!): LineItem
  updateSupplier(data: SupplierUpdateInput!, where: SupplierWhereUniqueInput!): Supplier
  deleteUser(where: UserWhereUniqueInput!): User
  deletePaidDetail(where: PaidDetailWhereUniqueInput!): PaidDetail
  deleteStockItem(where: StockItemWhereUniqueInput!): StockItem
  deleteSalesItem(where: SalesItemWhereUniqueInput!): SalesItem
  deleteSalesTicket(where: SalesTicketWhereUniqueInput!): SalesTicket
  deleteExpense(where: ExpenseWhereUniqueInput!): Expense
  deleteNotification(where: NotificationWhereUniqueInput!): Notification
  deleteBarcode(where: BarcodeWhereUniqueInput!): Barcode
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteLineItem(where: LineItemWhereUniqueInput!): LineItem
  deleteSupplier(where: SupplierWhereUniqueInput!): Supplier
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertPaidDetail(where: PaidDetailWhereUniqueInput!, create: PaidDetailCreateInput!, update: PaidDetailUpdateInput!): PaidDetail!
  upsertStockItem(where: StockItemWhereUniqueInput!, create: StockItemCreateInput!, update: StockItemUpdateInput!): StockItem!
  upsertSalesItem(where: SalesItemWhereUniqueInput!, create: SalesItemCreateInput!, update: SalesItemUpdateInput!): SalesItem!
  upsertSalesTicket(where: SalesTicketWhereUniqueInput!, create: SalesTicketCreateInput!, update: SalesTicketUpdateInput!): SalesTicket!
  upsertExpense(where: ExpenseWhereUniqueInput!, create: ExpenseCreateInput!, update: ExpenseUpdateInput!): Expense!
  upsertNotification(where: NotificationWhereUniqueInput!, create: NotificationCreateInput!, update: NotificationUpdateInput!): Notification!
  upsertBarcode(where: BarcodeWhereUniqueInput!, create: BarcodeCreateInput!, update: BarcodeUpdateInput!): Barcode!
  upsertCategory(where: CategoryWhereUniqueInput!, create: CategoryCreateInput!, update: CategoryUpdateInput!): Category!
  upsertProduct(where: ProductWhereUniqueInput!, create: ProductCreateInput!, update: ProductUpdateInput!): Product!
  upsertLineItem(where: LineItemWhereUniqueInput!, create: LineItemCreateInput!, update: LineItemUpdateInput!): LineItem!
  upsertSupplier(where: SupplierWhereUniqueInput!, create: SupplierCreateInput!, update: SupplierUpdateInput!): Supplier!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyPaidDetails(data: PaidDetailUpdateManyMutationInput!, where: PaidDetailWhereInput): BatchPayload!
  updateManyStockItems(data: StockItemUpdateManyMutationInput!, where: StockItemWhereInput): BatchPayload!
  updateManySalesItems(data: SalesItemUpdateManyMutationInput!, where: SalesItemWhereInput): BatchPayload!
  updateManySalesTickets(data: SalesTicketUpdateManyMutationInput!, where: SalesTicketWhereInput): BatchPayload!
  updateManyExpenses(data: ExpenseUpdateManyMutationInput!, where: ExpenseWhereInput): BatchPayload!
  updateManyNotifications(data: NotificationUpdateManyMutationInput!, where: NotificationWhereInput): BatchPayload!
  updateManyBarcodes(data: BarcodeUpdateManyMutationInput!, where: BarcodeWhereInput): BatchPayload!
  updateManyCategories(data: CategoryUpdateManyMutationInput!, where: CategoryWhereInput): BatchPayload!
  updateManyProducts(data: ProductUpdateManyMutationInput!, where: ProductWhereInput): BatchPayload!
  updateManyLineItems(data: LineItemUpdateManyMutationInput!, where: LineItemWhereInput): BatchPayload!
  updateManySuppliers(data: SupplierUpdateManyMutationInput!, where: SupplierWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyPaidDetails(where: PaidDetailWhereInput): BatchPayload!
  deleteManyStockItems(where: StockItemWhereInput): BatchPayload!
  deleteManySalesItems(where: SalesItemWhereInput): BatchPayload!
  deleteManySalesTickets(where: SalesTicketWhereInput): BatchPayload!
  deleteManyExpenses(where: ExpenseWhereInput): BatchPayload!
  deleteManyNotifications(where: NotificationWhereInput): BatchPayload!
  deleteManyBarcodes(where: BarcodeWhereInput): BatchPayload!
  deleteManyCategories(where: CategoryWhereInput): BatchPayload!
  deleteManyProducts(where: ProductWhereInput): BatchPayload!
  deleteManyLineItems(where: LineItemWhereInput): BatchPayload!
  deleteManySuppliers(where: SupplierWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Notification implements Node {
  id: ID!
  type: String!
  info: String!
}

"""A connection to a list of items."""
type NotificationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [NotificationEdge]!
  aggregate: AggregateNotification!
}

input NotificationCreateInput {
  id: ID
  type: String!
  info: String!
}

"""An edge in a connection."""
type NotificationEdge {
  """The item at the end of the edge."""
  node: Notification!

  """A cursor for use in pagination."""
  cursor: String!
}

enum NotificationOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  info_ASC
  info_DESC
}

type NotificationPreviousValues {
  id: ID!
  type: String!
  info: String!
}

type NotificationSubscriptionPayload {
  mutation: MutationType!
  node: Notification
  updatedFields: [String!]
  previousValues: NotificationPreviousValues
}

input NotificationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [NotificationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [NotificationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NotificationSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: NotificationWhereInput
}

input NotificationUpdateInput {
  type: String
  info: String
}

input NotificationUpdateManyMutationInput {
  type: String
  info: String
}

input NotificationWhereInput {
  """Logical AND on all given filters."""
  AND: [NotificationWhereInput!]

  """Logical OR on all given filters."""
  OR: [NotificationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NotificationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  type: String

  """All values that are not equal to given value."""
  type_not: String

  """All values that are contained in given list."""
  type_in: [String!]

  """All values that are not contained in given list."""
  type_not_in: [String!]

  """All values less than the given value."""
  type_lt: String

  """All values less than or equal the given value."""
  type_lte: String

  """All values greater than the given value."""
  type_gt: String

  """All values greater than or equal the given value."""
  type_gte: String

  """All values containing the given string."""
  type_contains: String

  """All values not containing the given string."""
  type_not_contains: String

  """All values starting with the given string."""
  type_starts_with: String

  """All values not starting with the given string."""
  type_not_starts_with: String

  """All values ending with the given string."""
  type_ends_with: String

  """All values not ending with the given string."""
  type_not_ends_with: String
  info: String

  """All values that are not equal to given value."""
  info_not: String

  """All values that are contained in given list."""
  info_in: [String!]

  """All values that are not contained in given list."""
  info_not_in: [String!]

  """All values less than the given value."""
  info_lt: String

  """All values less than or equal the given value."""
  info_lte: String

  """All values greater than the given value."""
  info_gt: String

  """All values greater than or equal the given value."""
  info_gte: String

  """All values containing the given string."""
  info_contains: String

  """All values not containing the given string."""
  info_not_contains: String

  """All values starting with the given string."""
  info_starts_with: String

  """All values not starting with the given string."""
  info_not_starts_with: String

  """All values ending with the given string."""
  info_ends_with: String

  """All values not ending with the given string."""
  info_not_ends_with: String
}

input NotificationWhereUniqueInput {
  id: ID
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type PaidDetail implements Node {
  id: ID!
  createdAt: DateTime
  description: String
  amountpaid: Float
  amounttaken: Float
  supplier: Supplier!
}

"""A connection to a list of items."""
type PaidDetailConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PaidDetailEdge]!
  aggregate: AggregatePaidDetail!
}

input PaidDetailCreateInput {
  id: ID
  description: String
  amountpaid: Float
  amounttaken: Float
  supplier: SupplierCreateOneWithoutPaidInput!
}

input PaidDetailCreateManyWithoutSupplierInput {
  create: [PaidDetailCreateWithoutSupplierInput!]
  connect: [PaidDetailWhereUniqueInput!]
}

input PaidDetailCreateWithoutSupplierInput {
  id: ID
  description: String
  amountpaid: Float
  amounttaken: Float
}

"""An edge in a connection."""
type PaidDetailEdge {
  """The item at the end of the edge."""
  node: PaidDetail!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PaidDetailOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  amountpaid_ASC
  amountpaid_DESC
  amounttaken_ASC
  amounttaken_DESC
}

type PaidDetailPreviousValues {
  id: ID!
  createdAt: DateTime
  description: String
  amountpaid: Float
  amounttaken: Float
}

input PaidDetailScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [PaidDetailScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [PaidDetailScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PaidDetailScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  amountpaid: Float

  """All values that are not equal to given value."""
  amountpaid_not: Float

  """All values that are contained in given list."""
  amountpaid_in: [Float!]

  """All values that are not contained in given list."""
  amountpaid_not_in: [Float!]

  """All values less than the given value."""
  amountpaid_lt: Float

  """All values less than or equal the given value."""
  amountpaid_lte: Float

  """All values greater than the given value."""
  amountpaid_gt: Float

  """All values greater than or equal the given value."""
  amountpaid_gte: Float
  amounttaken: Float

  """All values that are not equal to given value."""
  amounttaken_not: Float

  """All values that are contained in given list."""
  amounttaken_in: [Float!]

  """All values that are not contained in given list."""
  amounttaken_not_in: [Float!]

  """All values less than the given value."""
  amounttaken_lt: Float

  """All values less than or equal the given value."""
  amounttaken_lte: Float

  """All values greater than the given value."""
  amounttaken_gt: Float

  """All values greater than or equal the given value."""
  amounttaken_gte: Float
}

type PaidDetailSubscriptionPayload {
  mutation: MutationType!
  node: PaidDetail
  updatedFields: [String!]
  previousValues: PaidDetailPreviousValues
}

input PaidDetailSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PaidDetailSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PaidDetailSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PaidDetailSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PaidDetailWhereInput
}

input PaidDetailUpdateInput {
  description: String
  amountpaid: Float
  amounttaken: Float
  supplier: SupplierUpdateOneRequiredWithoutPaidInput
}

input PaidDetailUpdateManyDataInput {
  description: String
  amountpaid: Float
  amounttaken: Float
}

input PaidDetailUpdateManyMutationInput {
  description: String
  amountpaid: Float
  amounttaken: Float
}

input PaidDetailUpdateManyWithoutSupplierInput {
  create: [PaidDetailCreateWithoutSupplierInput!]
  connect: [PaidDetailWhereUniqueInput!]
  set: [PaidDetailWhereUniqueInput!]
  disconnect: [PaidDetailWhereUniqueInput!]
  delete: [PaidDetailWhereUniqueInput!]
  update: [PaidDetailUpdateWithWhereUniqueWithoutSupplierInput!]
  updateMany: [PaidDetailUpdateManyWithWhereNestedInput!]
  deleteMany: [PaidDetailScalarWhereInput!]
  upsert: [PaidDetailUpsertWithWhereUniqueWithoutSupplierInput!]
}

input PaidDetailUpdateManyWithWhereNestedInput {
  where: PaidDetailScalarWhereInput!
  data: PaidDetailUpdateManyDataInput!
}

input PaidDetailUpdateWithoutSupplierDataInput {
  description: String
  amountpaid: Float
  amounttaken: Float
}

input PaidDetailUpdateWithWhereUniqueWithoutSupplierInput {
  where: PaidDetailWhereUniqueInput!
  data: PaidDetailUpdateWithoutSupplierDataInput!
}

input PaidDetailUpsertWithWhereUniqueWithoutSupplierInput {
  where: PaidDetailWhereUniqueInput!
  update: PaidDetailUpdateWithoutSupplierDataInput!
  create: PaidDetailCreateWithoutSupplierInput!
}

input PaidDetailWhereInput {
  """Logical AND on all given filters."""
  AND: [PaidDetailWhereInput!]

  """Logical OR on all given filters."""
  OR: [PaidDetailWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PaidDetailWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  amountpaid: Float

  """All values that are not equal to given value."""
  amountpaid_not: Float

  """All values that are contained in given list."""
  amountpaid_in: [Float!]

  """All values that are not contained in given list."""
  amountpaid_not_in: [Float!]

  """All values less than the given value."""
  amountpaid_lt: Float

  """All values less than or equal the given value."""
  amountpaid_lte: Float

  """All values greater than the given value."""
  amountpaid_gt: Float

  """All values greater than or equal the given value."""
  amountpaid_gte: Float
  amounttaken: Float

  """All values that are not equal to given value."""
  amounttaken_not: Float

  """All values that are contained in given list."""
  amounttaken_in: [Float!]

  """All values that are not contained in given list."""
  amounttaken_not_in: [Float!]

  """All values less than the given value."""
  amounttaken_lt: Float

  """All values less than or equal the given value."""
  amounttaken_lte: Float

  """All values greater than the given value."""
  amounttaken_gt: Float

  """All values greater than or equal the given value."""
  amounttaken_gte: Float
  supplier: SupplierWhereInput
}

input PaidDetailWhereUniqueInput {
  id: ID
}

type Product implements Node {
  id: ID!
  barcode: String!
  name: String!
  sellPrice: Float
  wholesalePrice: Float
  noofpieces: Int
  category: Category!
  stock(where: StockItemWhereInput, orderBy: StockItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StockItem!]
}

"""A connection to a list of items."""
type ProductConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProductEdge]!
  aggregate: AggregateProduct!
}

input ProductCreateInput {
  id: ID
  barcode: String!
  name: String!
  sellPrice: Float
  wholesalePrice: Float
  noofpieces: Int
  category: CategoryCreateOneInput!
  stock: StockItemCreateManyWithoutProductInput
}

input ProductCreateOneInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
}

input ProductCreateOneWithoutStockInput {
  create: ProductCreateWithoutStockInput
  connect: ProductWhereUniqueInput
}

input ProductCreateWithoutStockInput {
  id: ID
  barcode: String!
  name: String!
  sellPrice: Float
  wholesalePrice: Float
  noofpieces: Int
  category: CategoryCreateOneInput!
}

"""An edge in a connection."""
type ProductEdge {
  """The item at the end of the edge."""
  node: Product!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProductOrderByInput {
  id_ASC
  id_DESC
  barcode_ASC
  barcode_DESC
  name_ASC
  name_DESC
  sellPrice_ASC
  sellPrice_DESC
  wholesalePrice_ASC
  wholesalePrice_DESC
  noofpieces_ASC
  noofpieces_DESC
}

type ProductPreviousValues {
  id: ID!
  barcode: String!
  name: String!
  sellPrice: Float
  wholesalePrice: Float
  noofpieces: Int
}

type ProductSubscriptionPayload {
  mutation: MutationType!
  node: Product
  updatedFields: [String!]
  previousValues: ProductPreviousValues
}

input ProductSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProductWhereInput
}

input ProductUpdateDataInput {
  barcode: String
  name: String
  sellPrice: Float
  wholesalePrice: Float
  noofpieces: Int
  category: CategoryUpdateOneRequiredInput
  stock: StockItemUpdateManyWithoutProductInput
}

input ProductUpdateInput {
  barcode: String
  name: String
  sellPrice: Float
  wholesalePrice: Float
  noofpieces: Int
  category: CategoryUpdateOneRequiredInput
  stock: StockItemUpdateManyWithoutProductInput
}

input ProductUpdateManyMutationInput {
  barcode: String
  name: String
  sellPrice: Float
  wholesalePrice: Float
  noofpieces: Int
}

input ProductUpdateOneRequiredInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
  update: ProductUpdateDataInput
  upsert: ProductUpsertNestedInput
}

input ProductUpdateOneRequiredWithoutStockInput {
  create: ProductCreateWithoutStockInput
  connect: ProductWhereUniqueInput
  update: ProductUpdateWithoutStockDataInput
  upsert: ProductUpsertWithoutStockInput
}

input ProductUpdateWithoutStockDataInput {
  barcode: String
  name: String
  sellPrice: Float
  wholesalePrice: Float
  noofpieces: Int
  category: CategoryUpdateOneRequiredInput
}

input ProductUpsertNestedInput {
  update: ProductUpdateDataInput!
  create: ProductCreateInput!
}

input ProductUpsertWithoutStockInput {
  update: ProductUpdateWithoutStockDataInput!
  create: ProductCreateWithoutStockInput!
}

input ProductWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  barcode: String

  """All values that are not equal to given value."""
  barcode_not: String

  """All values that are contained in given list."""
  barcode_in: [String!]

  """All values that are not contained in given list."""
  barcode_not_in: [String!]

  """All values less than the given value."""
  barcode_lt: String

  """All values less than or equal the given value."""
  barcode_lte: String

  """All values greater than the given value."""
  barcode_gt: String

  """All values greater than or equal the given value."""
  barcode_gte: String

  """All values containing the given string."""
  barcode_contains: String

  """All values not containing the given string."""
  barcode_not_contains: String

  """All values starting with the given string."""
  barcode_starts_with: String

  """All values not starting with the given string."""
  barcode_not_starts_with: String

  """All values ending with the given string."""
  barcode_ends_with: String

  """All values not ending with the given string."""
  barcode_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  sellPrice: Float

  """All values that are not equal to given value."""
  sellPrice_not: Float

  """All values that are contained in given list."""
  sellPrice_in: [Float!]

  """All values that are not contained in given list."""
  sellPrice_not_in: [Float!]

  """All values less than the given value."""
  sellPrice_lt: Float

  """All values less than or equal the given value."""
  sellPrice_lte: Float

  """All values greater than the given value."""
  sellPrice_gt: Float

  """All values greater than or equal the given value."""
  sellPrice_gte: Float
  wholesalePrice: Float

  """All values that are not equal to given value."""
  wholesalePrice_not: Float

  """All values that are contained in given list."""
  wholesalePrice_in: [Float!]

  """All values that are not contained in given list."""
  wholesalePrice_not_in: [Float!]

  """All values less than the given value."""
  wholesalePrice_lt: Float

  """All values less than or equal the given value."""
  wholesalePrice_lte: Float

  """All values greater than the given value."""
  wholesalePrice_gt: Float

  """All values greater than or equal the given value."""
  wholesalePrice_gte: Float
  noofpieces: Int

  """All values that are not equal to given value."""
  noofpieces_not: Int

  """All values that are contained in given list."""
  noofpieces_in: [Int!]

  """All values that are not contained in given list."""
  noofpieces_not_in: [Int!]

  """All values less than the given value."""
  noofpieces_lt: Int

  """All values less than or equal the given value."""
  noofpieces_lte: Int

  """All values greater than the given value."""
  noofpieces_gt: Int

  """All values greater than or equal the given value."""
  noofpieces_gte: Int
  category: CategoryWhereInput
  stock_every: StockItemWhereInput
  stock_some: StockItemWhereInput
  stock_none: StockItemWhereInput
}

input ProductWhereUniqueInput {
  id: ID
  barcode: String
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  paidDetails(where: PaidDetailWhereInput, orderBy: PaidDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PaidDetail]!
  stockItems(where: StockItemWhereInput, orderBy: StockItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StockItem]!
  salesItems(where: SalesItemWhereInput, orderBy: SalesItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SalesItem]!
  salesTickets(where: SalesTicketWhereInput, orderBy: SalesTicketOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SalesTicket]!
  expenses(where: ExpenseWhereInput, orderBy: ExpenseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Expense]!
  notifications(where: NotificationWhereInput, orderBy: NotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Notification]!
  barcodes(where: BarcodeWhereInput, orderBy: BarcodeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Barcode]!
  categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category]!
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product]!
  lineItems(where: LineItemWhereInput, orderBy: LineItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LineItem]!
  suppliers(where: SupplierWhereInput, orderBy: SupplierOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Supplier]!
  user(where: UserWhereUniqueInput!): User
  paidDetail(where: PaidDetailWhereUniqueInput!): PaidDetail
  stockItem(where: StockItemWhereUniqueInput!): StockItem
  salesItem(where: SalesItemWhereUniqueInput!): SalesItem
  salesTicket(where: SalesTicketWhereUniqueInput!): SalesTicket
  expense(where: ExpenseWhereUniqueInput!): Expense
  notification(where: NotificationWhereUniqueInput!): Notification
  barcode(where: BarcodeWhereUniqueInput!): Barcode
  category(where: CategoryWhereUniqueInput!): Category
  product(where: ProductWhereUniqueInput!): Product
  lineItem(where: LineItemWhereUniqueInput!): LineItem
  supplier(where: SupplierWhereUniqueInput!): Supplier
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  paidDetailsConnection(where: PaidDetailWhereInput, orderBy: PaidDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PaidDetailConnection!
  stockItemsConnection(where: StockItemWhereInput, orderBy: StockItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StockItemConnection!
  salesItemsConnection(where: SalesItemWhereInput, orderBy: SalesItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SalesItemConnection!
  salesTicketsConnection(where: SalesTicketWhereInput, orderBy: SalesTicketOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SalesTicketConnection!
  expensesConnection(where: ExpenseWhereInput, orderBy: ExpenseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ExpenseConnection!
  notificationsConnection(where: NotificationWhereInput, orderBy: NotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NotificationConnection!
  barcodesConnection(where: BarcodeWhereInput, orderBy: BarcodeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BarcodeConnection!
  categoriesConnection(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CategoryConnection!
  productsConnection(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductConnection!
  lineItemsConnection(where: LineItemWhereInput, orderBy: LineItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LineItemConnection!
  suppliersConnection(where: SupplierWhereInput, orderBy: SupplierOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SupplierConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type SalesItem implements Node {
  id: ID!
  createdAt: DateTime!
  noofpieces: Int!
  buyPrice: Float
  sellPrice: Float
  wholesalePrice: Float
  profit: Float
  product: Product!
  supplier: Supplier
  salesTicket: SalesTicket!
}

"""A connection to a list of items."""
type SalesItemConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SalesItemEdge]!
  aggregate: AggregateSalesItem!
}

input SalesItemCreateInput {
  id: ID
  noofpieces: Int!
  buyPrice: Float
  sellPrice: Float
  wholesalePrice: Float
  profit: Float
  product: ProductCreateOneInput!
  supplier: SupplierCreateOneInput
  salesTicket: SalesTicketCreateOneWithoutSalesInput!
}

input SalesItemCreateManyWithoutSalesTicketInput {
  create: [SalesItemCreateWithoutSalesTicketInput!]
  connect: [SalesItemWhereUniqueInput!]
}

input SalesItemCreateWithoutSalesTicketInput {
  id: ID
  noofpieces: Int!
  buyPrice: Float
  sellPrice: Float
  wholesalePrice: Float
  profit: Float
  product: ProductCreateOneInput!
  supplier: SupplierCreateOneInput
}

"""An edge in a connection."""
type SalesItemEdge {
  """The item at the end of the edge."""
  node: SalesItem!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SalesItemOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  noofpieces_ASC
  noofpieces_DESC
  buyPrice_ASC
  buyPrice_DESC
  sellPrice_ASC
  sellPrice_DESC
  wholesalePrice_ASC
  wholesalePrice_DESC
  profit_ASC
  profit_DESC
}

type SalesItemPreviousValues {
  id: ID!
  createdAt: DateTime!
  noofpieces: Int!
  buyPrice: Float
  sellPrice: Float
  wholesalePrice: Float
  profit: Float
}

input SalesItemScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [SalesItemScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [SalesItemScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SalesItemScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  noofpieces: Int

  """All values that are not equal to given value."""
  noofpieces_not: Int

  """All values that are contained in given list."""
  noofpieces_in: [Int!]

  """All values that are not contained in given list."""
  noofpieces_not_in: [Int!]

  """All values less than the given value."""
  noofpieces_lt: Int

  """All values less than or equal the given value."""
  noofpieces_lte: Int

  """All values greater than the given value."""
  noofpieces_gt: Int

  """All values greater than or equal the given value."""
  noofpieces_gte: Int
  buyPrice: Float

  """All values that are not equal to given value."""
  buyPrice_not: Float

  """All values that are contained in given list."""
  buyPrice_in: [Float!]

  """All values that are not contained in given list."""
  buyPrice_not_in: [Float!]

  """All values less than the given value."""
  buyPrice_lt: Float

  """All values less than or equal the given value."""
  buyPrice_lte: Float

  """All values greater than the given value."""
  buyPrice_gt: Float

  """All values greater than or equal the given value."""
  buyPrice_gte: Float
  sellPrice: Float

  """All values that are not equal to given value."""
  sellPrice_not: Float

  """All values that are contained in given list."""
  sellPrice_in: [Float!]

  """All values that are not contained in given list."""
  sellPrice_not_in: [Float!]

  """All values less than the given value."""
  sellPrice_lt: Float

  """All values less than or equal the given value."""
  sellPrice_lte: Float

  """All values greater than the given value."""
  sellPrice_gt: Float

  """All values greater than or equal the given value."""
  sellPrice_gte: Float
  wholesalePrice: Float

  """All values that are not equal to given value."""
  wholesalePrice_not: Float

  """All values that are contained in given list."""
  wholesalePrice_in: [Float!]

  """All values that are not contained in given list."""
  wholesalePrice_not_in: [Float!]

  """All values less than the given value."""
  wholesalePrice_lt: Float

  """All values less than or equal the given value."""
  wholesalePrice_lte: Float

  """All values greater than the given value."""
  wholesalePrice_gt: Float

  """All values greater than or equal the given value."""
  wholesalePrice_gte: Float
  profit: Float

  """All values that are not equal to given value."""
  profit_not: Float

  """All values that are contained in given list."""
  profit_in: [Float!]

  """All values that are not contained in given list."""
  profit_not_in: [Float!]

  """All values less than the given value."""
  profit_lt: Float

  """All values less than or equal the given value."""
  profit_lte: Float

  """All values greater than the given value."""
  profit_gt: Float

  """All values greater than or equal the given value."""
  profit_gte: Float
}

type SalesItemSubscriptionPayload {
  mutation: MutationType!
  node: SalesItem
  updatedFields: [String!]
  previousValues: SalesItemPreviousValues
}

input SalesItemSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SalesItemSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SalesItemSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SalesItemSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SalesItemWhereInput
}

input SalesItemUpdateInput {
  noofpieces: Int
  buyPrice: Float
  sellPrice: Float
  wholesalePrice: Float
  profit: Float
  product: ProductUpdateOneRequiredInput
  supplier: SupplierUpdateOneInput
  salesTicket: SalesTicketUpdateOneRequiredWithoutSalesInput
}

input SalesItemUpdateManyDataInput {
  noofpieces: Int
  buyPrice: Float
  sellPrice: Float
  wholesalePrice: Float
  profit: Float
}

input SalesItemUpdateManyMutationInput {
  noofpieces: Int
  buyPrice: Float
  sellPrice: Float
  wholesalePrice: Float
  profit: Float
}

input SalesItemUpdateManyWithoutSalesTicketInput {
  create: [SalesItemCreateWithoutSalesTicketInput!]
  connect: [SalesItemWhereUniqueInput!]
  set: [SalesItemWhereUniqueInput!]
  disconnect: [SalesItemWhereUniqueInput!]
  delete: [SalesItemWhereUniqueInput!]
  update: [SalesItemUpdateWithWhereUniqueWithoutSalesTicketInput!]
  updateMany: [SalesItemUpdateManyWithWhereNestedInput!]
  deleteMany: [SalesItemScalarWhereInput!]
  upsert: [SalesItemUpsertWithWhereUniqueWithoutSalesTicketInput!]
}

input SalesItemUpdateManyWithWhereNestedInput {
  where: SalesItemScalarWhereInput!
  data: SalesItemUpdateManyDataInput!
}

input SalesItemUpdateWithoutSalesTicketDataInput {
  noofpieces: Int
  buyPrice: Float
  sellPrice: Float
  wholesalePrice: Float
  profit: Float
  product: ProductUpdateOneRequiredInput
  supplier: SupplierUpdateOneInput
}

input SalesItemUpdateWithWhereUniqueWithoutSalesTicketInput {
  where: SalesItemWhereUniqueInput!
  data: SalesItemUpdateWithoutSalesTicketDataInput!
}

input SalesItemUpsertWithWhereUniqueWithoutSalesTicketInput {
  where: SalesItemWhereUniqueInput!
  update: SalesItemUpdateWithoutSalesTicketDataInput!
  create: SalesItemCreateWithoutSalesTicketInput!
}

input SalesItemWhereInput {
  """Logical AND on all given filters."""
  AND: [SalesItemWhereInput!]

  """Logical OR on all given filters."""
  OR: [SalesItemWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SalesItemWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  noofpieces: Int

  """All values that are not equal to given value."""
  noofpieces_not: Int

  """All values that are contained in given list."""
  noofpieces_in: [Int!]

  """All values that are not contained in given list."""
  noofpieces_not_in: [Int!]

  """All values less than the given value."""
  noofpieces_lt: Int

  """All values less than or equal the given value."""
  noofpieces_lte: Int

  """All values greater than the given value."""
  noofpieces_gt: Int

  """All values greater than or equal the given value."""
  noofpieces_gte: Int
  buyPrice: Float

  """All values that are not equal to given value."""
  buyPrice_not: Float

  """All values that are contained in given list."""
  buyPrice_in: [Float!]

  """All values that are not contained in given list."""
  buyPrice_not_in: [Float!]

  """All values less than the given value."""
  buyPrice_lt: Float

  """All values less than or equal the given value."""
  buyPrice_lte: Float

  """All values greater than the given value."""
  buyPrice_gt: Float

  """All values greater than or equal the given value."""
  buyPrice_gte: Float
  sellPrice: Float

  """All values that are not equal to given value."""
  sellPrice_not: Float

  """All values that are contained in given list."""
  sellPrice_in: [Float!]

  """All values that are not contained in given list."""
  sellPrice_not_in: [Float!]

  """All values less than the given value."""
  sellPrice_lt: Float

  """All values less than or equal the given value."""
  sellPrice_lte: Float

  """All values greater than the given value."""
  sellPrice_gt: Float

  """All values greater than or equal the given value."""
  sellPrice_gte: Float
  wholesalePrice: Float

  """All values that are not equal to given value."""
  wholesalePrice_not: Float

  """All values that are contained in given list."""
  wholesalePrice_in: [Float!]

  """All values that are not contained in given list."""
  wholesalePrice_not_in: [Float!]

  """All values less than the given value."""
  wholesalePrice_lt: Float

  """All values less than or equal the given value."""
  wholesalePrice_lte: Float

  """All values greater than the given value."""
  wholesalePrice_gt: Float

  """All values greater than or equal the given value."""
  wholesalePrice_gte: Float
  profit: Float

  """All values that are not equal to given value."""
  profit_not: Float

  """All values that are contained in given list."""
  profit_in: [Float!]

  """All values that are not contained in given list."""
  profit_not_in: [Float!]

  """All values less than the given value."""
  profit_lt: Float

  """All values less than or equal the given value."""
  profit_lte: Float

  """All values greater than the given value."""
  profit_gt: Float

  """All values greater than or equal the given value."""
  profit_gte: Float
  product: ProductWhereInput
  supplier: SupplierWhereInput
  salesTicket: SalesTicketWhereInput
}

input SalesItemWhereUniqueInput {
  id: ID
}

type SalesTicket implements Node {
  id: ID!
  createdAt: DateTime!
  receipt: String!
  sales(where: SalesItemWhereInput, orderBy: SalesItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SalesItem!]
}

"""A connection to a list of items."""
type SalesTicketConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SalesTicketEdge]!
  aggregate: AggregateSalesTicket!
}

input SalesTicketCreateInput {
  id: ID
  receipt: String!
  sales: SalesItemCreateManyWithoutSalesTicketInput
}

input SalesTicketCreateOneWithoutSalesInput {
  create: SalesTicketCreateWithoutSalesInput
  connect: SalesTicketWhereUniqueInput
}

input SalesTicketCreateWithoutSalesInput {
  id: ID
  receipt: String!
}

"""An edge in a connection."""
type SalesTicketEdge {
  """The item at the end of the edge."""
  node: SalesTicket!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SalesTicketOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  receipt_ASC
  receipt_DESC
}

type SalesTicketPreviousValues {
  id: ID!
  createdAt: DateTime!
  receipt: String!
}

type SalesTicketSubscriptionPayload {
  mutation: MutationType!
  node: SalesTicket
  updatedFields: [String!]
  previousValues: SalesTicketPreviousValues
}

input SalesTicketSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SalesTicketSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SalesTicketSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SalesTicketSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SalesTicketWhereInput
}

input SalesTicketUpdateInput {
  receipt: String
  sales: SalesItemUpdateManyWithoutSalesTicketInput
}

input SalesTicketUpdateManyMutationInput {
  receipt: String
}

input SalesTicketUpdateOneRequiredWithoutSalesInput {
  create: SalesTicketCreateWithoutSalesInput
  connect: SalesTicketWhereUniqueInput
  update: SalesTicketUpdateWithoutSalesDataInput
  upsert: SalesTicketUpsertWithoutSalesInput
}

input SalesTicketUpdateWithoutSalesDataInput {
  receipt: String
}

input SalesTicketUpsertWithoutSalesInput {
  update: SalesTicketUpdateWithoutSalesDataInput!
  create: SalesTicketCreateWithoutSalesInput!
}

input SalesTicketWhereInput {
  """Logical AND on all given filters."""
  AND: [SalesTicketWhereInput!]

  """Logical OR on all given filters."""
  OR: [SalesTicketWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SalesTicketWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  receipt: String

  """All values that are not equal to given value."""
  receipt_not: String

  """All values that are contained in given list."""
  receipt_in: [String!]

  """All values that are not contained in given list."""
  receipt_not_in: [String!]

  """All values less than the given value."""
  receipt_lt: String

  """All values less than or equal the given value."""
  receipt_lte: String

  """All values greater than the given value."""
  receipt_gt: String

  """All values greater than or equal the given value."""
  receipt_gte: String

  """All values containing the given string."""
  receipt_contains: String

  """All values not containing the given string."""
  receipt_not_contains: String

  """All values starting with the given string."""
  receipt_starts_with: String

  """All values not starting with the given string."""
  receipt_not_starts_with: String

  """All values ending with the given string."""
  receipt_ends_with: String

  """All values not ending with the given string."""
  receipt_not_ends_with: String
  sales_every: SalesItemWhereInput
  sales_some: SalesItemWhereInput
  sales_none: SalesItemWhereInput
}

input SalesTicketWhereUniqueInput {
  id: ID
  receipt: String
}

type StockItem implements Node {
  id: ID!
  createdAt: DateTime!
  badgeNumber: String
  noofpieces: Int!
  buyPrice: Float!
  sellPrice: Float!
  wholesalePrice: Float!
  expiry: DateTime
  product: Product!
  supplier: Supplier!
}

"""A connection to a list of items."""
type StockItemConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StockItemEdge]!
  aggregate: AggregateStockItem!
}

input StockItemCreateInput {
  id: ID
  badgeNumber: String
  noofpieces: Int!
  buyPrice: Float!
  sellPrice: Float!
  wholesalePrice: Float!
  expiry: DateTime
  product: ProductCreateOneWithoutStockInput!
  supplier: SupplierCreateOneInput!
}

input StockItemCreateManyWithoutProductInput {
  create: [StockItemCreateWithoutProductInput!]
  connect: [StockItemWhereUniqueInput!]
}

input StockItemCreateWithoutProductInput {
  id: ID
  badgeNumber: String
  noofpieces: Int!
  buyPrice: Float!
  sellPrice: Float!
  wholesalePrice: Float!
  expiry: DateTime
  supplier: SupplierCreateOneInput!
}

"""An edge in a connection."""
type StockItemEdge {
  """The item at the end of the edge."""
  node: StockItem!

  """A cursor for use in pagination."""
  cursor: String!
}

enum StockItemOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  badgeNumber_ASC
  badgeNumber_DESC
  noofpieces_ASC
  noofpieces_DESC
  buyPrice_ASC
  buyPrice_DESC
  sellPrice_ASC
  sellPrice_DESC
  wholesalePrice_ASC
  wholesalePrice_DESC
  expiry_ASC
  expiry_DESC
}

type StockItemPreviousValues {
  id: ID!
  createdAt: DateTime!
  badgeNumber: String
  noofpieces: Int!
  buyPrice: Float!
  sellPrice: Float!
  wholesalePrice: Float!
  expiry: DateTime
}

input StockItemScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [StockItemScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [StockItemScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StockItemScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  badgeNumber: String

  """All values that are not equal to given value."""
  badgeNumber_not: String

  """All values that are contained in given list."""
  badgeNumber_in: [String!]

  """All values that are not contained in given list."""
  badgeNumber_not_in: [String!]

  """All values less than the given value."""
  badgeNumber_lt: String

  """All values less than or equal the given value."""
  badgeNumber_lte: String

  """All values greater than the given value."""
  badgeNumber_gt: String

  """All values greater than or equal the given value."""
  badgeNumber_gte: String

  """All values containing the given string."""
  badgeNumber_contains: String

  """All values not containing the given string."""
  badgeNumber_not_contains: String

  """All values starting with the given string."""
  badgeNumber_starts_with: String

  """All values not starting with the given string."""
  badgeNumber_not_starts_with: String

  """All values ending with the given string."""
  badgeNumber_ends_with: String

  """All values not ending with the given string."""
  badgeNumber_not_ends_with: String
  noofpieces: Int

  """All values that are not equal to given value."""
  noofpieces_not: Int

  """All values that are contained in given list."""
  noofpieces_in: [Int!]

  """All values that are not contained in given list."""
  noofpieces_not_in: [Int!]

  """All values less than the given value."""
  noofpieces_lt: Int

  """All values less than or equal the given value."""
  noofpieces_lte: Int

  """All values greater than the given value."""
  noofpieces_gt: Int

  """All values greater than or equal the given value."""
  noofpieces_gte: Int
  buyPrice: Float

  """All values that are not equal to given value."""
  buyPrice_not: Float

  """All values that are contained in given list."""
  buyPrice_in: [Float!]

  """All values that are not contained in given list."""
  buyPrice_not_in: [Float!]

  """All values less than the given value."""
  buyPrice_lt: Float

  """All values less than or equal the given value."""
  buyPrice_lte: Float

  """All values greater than the given value."""
  buyPrice_gt: Float

  """All values greater than or equal the given value."""
  buyPrice_gte: Float
  sellPrice: Float

  """All values that are not equal to given value."""
  sellPrice_not: Float

  """All values that are contained in given list."""
  sellPrice_in: [Float!]

  """All values that are not contained in given list."""
  sellPrice_not_in: [Float!]

  """All values less than the given value."""
  sellPrice_lt: Float

  """All values less than or equal the given value."""
  sellPrice_lte: Float

  """All values greater than the given value."""
  sellPrice_gt: Float

  """All values greater than or equal the given value."""
  sellPrice_gte: Float
  wholesalePrice: Float

  """All values that are not equal to given value."""
  wholesalePrice_not: Float

  """All values that are contained in given list."""
  wholesalePrice_in: [Float!]

  """All values that are not contained in given list."""
  wholesalePrice_not_in: [Float!]

  """All values less than the given value."""
  wholesalePrice_lt: Float

  """All values less than or equal the given value."""
  wholesalePrice_lte: Float

  """All values greater than the given value."""
  wholesalePrice_gt: Float

  """All values greater than or equal the given value."""
  wholesalePrice_gte: Float
  expiry: DateTime

  """All values that are not equal to given value."""
  expiry_not: DateTime

  """All values that are contained in given list."""
  expiry_in: [DateTime!]

  """All values that are not contained in given list."""
  expiry_not_in: [DateTime!]

  """All values less than the given value."""
  expiry_lt: DateTime

  """All values less than or equal the given value."""
  expiry_lte: DateTime

  """All values greater than the given value."""
  expiry_gt: DateTime

  """All values greater than or equal the given value."""
  expiry_gte: DateTime
}

type StockItemSubscriptionPayload {
  mutation: MutationType!
  node: StockItem
  updatedFields: [String!]
  previousValues: StockItemPreviousValues
}

input StockItemSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [StockItemSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [StockItemSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StockItemSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: StockItemWhereInput
}

input StockItemUpdateInput {
  badgeNumber: String
  noofpieces: Int
  buyPrice: Float
  sellPrice: Float
  wholesalePrice: Float
  expiry: DateTime
  product: ProductUpdateOneRequiredWithoutStockInput
  supplier: SupplierUpdateOneRequiredInput
}

input StockItemUpdateManyDataInput {
  badgeNumber: String
  noofpieces: Int
  buyPrice: Float
  sellPrice: Float
  wholesalePrice: Float
  expiry: DateTime
}

input StockItemUpdateManyMutationInput {
  badgeNumber: String
  noofpieces: Int
  buyPrice: Float
  sellPrice: Float
  wholesalePrice: Float
  expiry: DateTime
}

input StockItemUpdateManyWithoutProductInput {
  create: [StockItemCreateWithoutProductInput!]
  connect: [StockItemWhereUniqueInput!]
  set: [StockItemWhereUniqueInput!]
  disconnect: [StockItemWhereUniqueInput!]
  delete: [StockItemWhereUniqueInput!]
  update: [StockItemUpdateWithWhereUniqueWithoutProductInput!]
  updateMany: [StockItemUpdateManyWithWhereNestedInput!]
  deleteMany: [StockItemScalarWhereInput!]
  upsert: [StockItemUpsertWithWhereUniqueWithoutProductInput!]
}

input StockItemUpdateManyWithWhereNestedInput {
  where: StockItemScalarWhereInput!
  data: StockItemUpdateManyDataInput!
}

input StockItemUpdateWithoutProductDataInput {
  badgeNumber: String
  noofpieces: Int
  buyPrice: Float
  sellPrice: Float
  wholesalePrice: Float
  expiry: DateTime
  supplier: SupplierUpdateOneRequiredInput
}

input StockItemUpdateWithWhereUniqueWithoutProductInput {
  where: StockItemWhereUniqueInput!
  data: StockItemUpdateWithoutProductDataInput!
}

input StockItemUpsertWithWhereUniqueWithoutProductInput {
  where: StockItemWhereUniqueInput!
  update: StockItemUpdateWithoutProductDataInput!
  create: StockItemCreateWithoutProductInput!
}

input StockItemWhereInput {
  """Logical AND on all given filters."""
  AND: [StockItemWhereInput!]

  """Logical OR on all given filters."""
  OR: [StockItemWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StockItemWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  badgeNumber: String

  """All values that are not equal to given value."""
  badgeNumber_not: String

  """All values that are contained in given list."""
  badgeNumber_in: [String!]

  """All values that are not contained in given list."""
  badgeNumber_not_in: [String!]

  """All values less than the given value."""
  badgeNumber_lt: String

  """All values less than or equal the given value."""
  badgeNumber_lte: String

  """All values greater than the given value."""
  badgeNumber_gt: String

  """All values greater than or equal the given value."""
  badgeNumber_gte: String

  """All values containing the given string."""
  badgeNumber_contains: String

  """All values not containing the given string."""
  badgeNumber_not_contains: String

  """All values starting with the given string."""
  badgeNumber_starts_with: String

  """All values not starting with the given string."""
  badgeNumber_not_starts_with: String

  """All values ending with the given string."""
  badgeNumber_ends_with: String

  """All values not ending with the given string."""
  badgeNumber_not_ends_with: String
  noofpieces: Int

  """All values that are not equal to given value."""
  noofpieces_not: Int

  """All values that are contained in given list."""
  noofpieces_in: [Int!]

  """All values that are not contained in given list."""
  noofpieces_not_in: [Int!]

  """All values less than the given value."""
  noofpieces_lt: Int

  """All values less than or equal the given value."""
  noofpieces_lte: Int

  """All values greater than the given value."""
  noofpieces_gt: Int

  """All values greater than or equal the given value."""
  noofpieces_gte: Int
  buyPrice: Float

  """All values that are not equal to given value."""
  buyPrice_not: Float

  """All values that are contained in given list."""
  buyPrice_in: [Float!]

  """All values that are not contained in given list."""
  buyPrice_not_in: [Float!]

  """All values less than the given value."""
  buyPrice_lt: Float

  """All values less than or equal the given value."""
  buyPrice_lte: Float

  """All values greater than the given value."""
  buyPrice_gt: Float

  """All values greater than or equal the given value."""
  buyPrice_gte: Float
  sellPrice: Float

  """All values that are not equal to given value."""
  sellPrice_not: Float

  """All values that are contained in given list."""
  sellPrice_in: [Float!]

  """All values that are not contained in given list."""
  sellPrice_not_in: [Float!]

  """All values less than the given value."""
  sellPrice_lt: Float

  """All values less than or equal the given value."""
  sellPrice_lte: Float

  """All values greater than the given value."""
  sellPrice_gt: Float

  """All values greater than or equal the given value."""
  sellPrice_gte: Float
  wholesalePrice: Float

  """All values that are not equal to given value."""
  wholesalePrice_not: Float

  """All values that are contained in given list."""
  wholesalePrice_in: [Float!]

  """All values that are not contained in given list."""
  wholesalePrice_not_in: [Float!]

  """All values less than the given value."""
  wholesalePrice_lt: Float

  """All values less than or equal the given value."""
  wholesalePrice_lte: Float

  """All values greater than the given value."""
  wholesalePrice_gt: Float

  """All values greater than or equal the given value."""
  wholesalePrice_gte: Float
  expiry: DateTime

  """All values that are not equal to given value."""
  expiry_not: DateTime

  """All values that are contained in given list."""
  expiry_in: [DateTime!]

  """All values that are not contained in given list."""
  expiry_not_in: [DateTime!]

  """All values less than the given value."""
  expiry_lt: DateTime

  """All values less than or equal the given value."""
  expiry_lte: DateTime

  """All values greater than the given value."""
  expiry_gt: DateTime

  """All values greater than or equal the given value."""
  expiry_gte: DateTime
  product: ProductWhereInput
  supplier: SupplierWhereInput
}

input StockItemWhereUniqueInput {
  id: ID
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  paidDetail(where: PaidDetailSubscriptionWhereInput): PaidDetailSubscriptionPayload
  stockItem(where: StockItemSubscriptionWhereInput): StockItemSubscriptionPayload
  salesItem(where: SalesItemSubscriptionWhereInput): SalesItemSubscriptionPayload
  salesTicket(where: SalesTicketSubscriptionWhereInput): SalesTicketSubscriptionPayload
  expense(where: ExpenseSubscriptionWhereInput): ExpenseSubscriptionPayload
  notification(where: NotificationSubscriptionWhereInput): NotificationSubscriptionPayload
  barcode(where: BarcodeSubscriptionWhereInput): BarcodeSubscriptionPayload
  category(where: CategorySubscriptionWhereInput): CategorySubscriptionPayload
  product(where: ProductSubscriptionWhereInput): ProductSubscriptionPayload
  lineItem(where: LineItemSubscriptionWhereInput): LineItemSubscriptionPayload
  supplier(where: SupplierSubscriptionWhereInput): SupplierSubscriptionPayload
}

type Supplier implements Node {
  id: ID!
  name: String!
  email: String
  phone: String
  address: String
  amounttotake: Float
  amounttopay: Float
  paid(where: PaidDetailWhereInput, orderBy: PaidDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PaidDetail!]
}

"""A connection to a list of items."""
type SupplierConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SupplierEdge]!
  aggregate: AggregateSupplier!
}

input SupplierCreateInput {
  id: ID
  name: String!
  email: String
  phone: String
  address: String
  amounttotake: Float
  amounttopay: Float
  paid: PaidDetailCreateManyWithoutSupplierInput
}

input SupplierCreateOneInput {
  create: SupplierCreateInput
  connect: SupplierWhereUniqueInput
}

input SupplierCreateOneWithoutPaidInput {
  create: SupplierCreateWithoutPaidInput
  connect: SupplierWhereUniqueInput
}

input SupplierCreateWithoutPaidInput {
  id: ID
  name: String!
  email: String
  phone: String
  address: String
  amounttotake: Float
  amounttopay: Float
}

"""An edge in a connection."""
type SupplierEdge {
  """The item at the end of the edge."""
  node: Supplier!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SupplierOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  phone_ASC
  phone_DESC
  address_ASC
  address_DESC
  amounttotake_ASC
  amounttotake_DESC
  amounttopay_ASC
  amounttopay_DESC
}

type SupplierPreviousValues {
  id: ID!
  name: String!
  email: String
  phone: String
  address: String
  amounttotake: Float
  amounttopay: Float
}

type SupplierSubscriptionPayload {
  mutation: MutationType!
  node: Supplier
  updatedFields: [String!]
  previousValues: SupplierPreviousValues
}

input SupplierSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SupplierSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SupplierSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SupplierSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SupplierWhereInput
}

input SupplierUpdateDataInput {
  name: String
  email: String
  phone: String
  address: String
  amounttotake: Float
  amounttopay: Float
  paid: PaidDetailUpdateManyWithoutSupplierInput
}

input SupplierUpdateInput {
  name: String
  email: String
  phone: String
  address: String
  amounttotake: Float
  amounttopay: Float
  paid: PaidDetailUpdateManyWithoutSupplierInput
}

input SupplierUpdateManyMutationInput {
  name: String
  email: String
  phone: String
  address: String
  amounttotake: Float
  amounttopay: Float
}

input SupplierUpdateOneInput {
  create: SupplierCreateInput
  connect: SupplierWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: SupplierUpdateDataInput
  upsert: SupplierUpsertNestedInput
}

input SupplierUpdateOneRequiredInput {
  create: SupplierCreateInput
  connect: SupplierWhereUniqueInput
  update: SupplierUpdateDataInput
  upsert: SupplierUpsertNestedInput
}

input SupplierUpdateOneRequiredWithoutPaidInput {
  create: SupplierCreateWithoutPaidInput
  connect: SupplierWhereUniqueInput
  update: SupplierUpdateWithoutPaidDataInput
  upsert: SupplierUpsertWithoutPaidInput
}

input SupplierUpdateWithoutPaidDataInput {
  name: String
  email: String
  phone: String
  address: String
  amounttotake: Float
  amounttopay: Float
}

input SupplierUpsertNestedInput {
  update: SupplierUpdateDataInput!
  create: SupplierCreateInput!
}

input SupplierUpsertWithoutPaidInput {
  update: SupplierUpdateWithoutPaidDataInput!
  create: SupplierCreateWithoutPaidInput!
}

input SupplierWhereInput {
  """Logical AND on all given filters."""
  AND: [SupplierWhereInput!]

  """Logical OR on all given filters."""
  OR: [SupplierWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SupplierWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  phone: String

  """All values that are not equal to given value."""
  phone_not: String

  """All values that are contained in given list."""
  phone_in: [String!]

  """All values that are not contained in given list."""
  phone_not_in: [String!]

  """All values less than the given value."""
  phone_lt: String

  """All values less than or equal the given value."""
  phone_lte: String

  """All values greater than the given value."""
  phone_gt: String

  """All values greater than or equal the given value."""
  phone_gte: String

  """All values containing the given string."""
  phone_contains: String

  """All values not containing the given string."""
  phone_not_contains: String

  """All values starting with the given string."""
  phone_starts_with: String

  """All values not starting with the given string."""
  phone_not_starts_with: String

  """All values ending with the given string."""
  phone_ends_with: String

  """All values not ending with the given string."""
  phone_not_ends_with: String
  address: String

  """All values that are not equal to given value."""
  address_not: String

  """All values that are contained in given list."""
  address_in: [String!]

  """All values that are not contained in given list."""
  address_not_in: [String!]

  """All values less than the given value."""
  address_lt: String

  """All values less than or equal the given value."""
  address_lte: String

  """All values greater than the given value."""
  address_gt: String

  """All values greater than or equal the given value."""
  address_gte: String

  """All values containing the given string."""
  address_contains: String

  """All values not containing the given string."""
  address_not_contains: String

  """All values starting with the given string."""
  address_starts_with: String

  """All values not starting with the given string."""
  address_not_starts_with: String

  """All values ending with the given string."""
  address_ends_with: String

  """All values not ending with the given string."""
  address_not_ends_with: String
  amounttotake: Float

  """All values that are not equal to given value."""
  amounttotake_not: Float

  """All values that are contained in given list."""
  amounttotake_in: [Float!]

  """All values that are not contained in given list."""
  amounttotake_not_in: [Float!]

  """All values less than the given value."""
  amounttotake_lt: Float

  """All values less than or equal the given value."""
  amounttotake_lte: Float

  """All values greater than the given value."""
  amounttotake_gt: Float

  """All values greater than or equal the given value."""
  amounttotake_gte: Float
  amounttopay: Float

  """All values that are not equal to given value."""
  amounttopay_not: Float

  """All values that are contained in given list."""
  amounttopay_in: [Float!]

  """All values that are not contained in given list."""
  amounttopay_not_in: [Float!]

  """All values less than the given value."""
  amounttopay_lt: Float

  """All values less than or equal the given value."""
  amounttopay_lte: Float

  """All values greater than the given value."""
  amounttopay_gt: Float

  """All values greater than or equal the given value."""
  amounttopay_gte: Float
  paid_every: PaidDetailWhereInput
  paid_some: PaidDetailWhereInput
  paid_none: PaidDetailWhereInput
}

input SupplierWhereUniqueInput {
  id: ID
  name: String
}

type User implements Node {
  id: ID!
  username: String!
  password: String!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  username: String!
  password: String!
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  username_ASC
  username_DESC
  password_ASC
  password_DESC
}

type UserPreviousValues {
  id: ID!
  username: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  username: String
  password: String
}

input UserUpdateManyMutationInput {
  username: String
  password: String
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  username: String

  """All values that are not equal to given value."""
  username_not: String

  """All values that are contained in given list."""
  username_in: [String!]

  """All values that are not contained in given list."""
  username_not_in: [String!]

  """All values less than the given value."""
  username_lt: String

  """All values less than or equal the given value."""
  username_lte: String

  """All values greater than the given value."""
  username_gt: String

  """All values greater than or equal the given value."""
  username_gte: String

  """All values containing the given string."""
  username_contains: String

  """All values not containing the given string."""
  username_not_contains: String

  """All values starting with the given string."""
  username_starts_with: String

  """All values not starting with the given string."""
  username_not_starts_with: String

  """All values ending with the given string."""
  username_ends_with: String

  """All values not ending with the given string."""
  username_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
}

input UserWhereUniqueInput {
  id: ID
  username: String
}
