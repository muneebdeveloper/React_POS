# import * from './generated/prisma.graphql'


type Query{
    currentUser:User
    product(where: ProductWhereUniqueInput!): Product
    stockItem(where: StockItemWhereUniqueInput!): StockItem
    supplier(where: SupplierWhereUniqueInput!): Supplier
    expense(where: ExpenseWhereUniqueInput!): Expense
    expenses(where: ExpenseWhereInput, orderBy: ExpenseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Expense]!
    categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category]!
    products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product]!
    lineItems(where: LineItemWhereInput, orderBy: LineItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LineItem]!
    salesItems(where: SalesItemWhereInput, orderBy: SalesItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SalesItem]!
    suppliers(where: SupplierWhereInput, orderBy: SupplierOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Supplier]!
    paidDetails(where: PaidDetailWhereInput, orderBy: PaidDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PaidDetail]!
}

type Mutation{
    signin(data:SignInUserInput!):User!
    signout:Message
    createLineItem(data: LineItemCreateInput!): LineItem!
    updateLineItem(data: LineItemUpdateInput!, where: LineItemWhereUniqueInput!): LineItem
    deleteLineItem(where: LineItemWhereUniqueInput!): LineItem
    createCategory(data: CategoryCreateInput!): Category!
    updateCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
    deleteCategory(where: CategoryWhereUniqueInput!): Category
    createBarcode(data: BarcodeCreateInput!): Barcode!
    createProduct(data: ProductCreateInput!): Product!
    updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
    deleteProduct(where: ProductWhereUniqueInput!): Product
    createStockItem(data: StockItemCreateInput!): StockItem!
    updateStockItem(data: StockItemUpdateInput!, where: StockItemWhereUniqueInput!): StockItem
    deleteStockItem(where: StockItemWhereUniqueInput!): StockItem
    createSupplier(data: SupplierCreateInput!): Supplier!
    updateSupplier(data: SupplierUpdateInput!, where: SupplierWhereUniqueInput!): Supplier
    deleteSupplier(where: SupplierWhereUniqueInput!): Supplier
    createPaidDetail(data: PaidDetailCreateInput!): PaidDetail!
    createExpense(data: ExpenseCreateInput!): Expense!
    updateExpense(data: ExpenseUpdateInput!, where: ExpenseWhereUniqueInput!): Expense
    deleteExpense(where: ExpenseWhereUniqueInput!): Expense
    createSalesItem(data: SalesItemCreateInput!): SalesItem!
    updateSalesItem(data: SalesItemUpdateInput!, where: SalesItemWhereUniqueInput!): SalesItem
    deleteSalesItem(where: SalesItemWhereUniqueInput!): SalesItem
    createSalesTicket: SalesTicket!
     
}

type Subscription{
    barcode(where: BarcodeSubscriptionWhereInput): BarcodeSubscriptionPayload
}

input SignInUserInput {
    username:String!
    password:String!
}

type Message{
    message:String!
}